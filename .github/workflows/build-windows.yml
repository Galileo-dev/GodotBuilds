name: "Create weekly build"
on:
  # schedule:
  #   - cron: "0 0 * * *"
  push:
    branches:
      - master
jobs:
  build:
    name: Build
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          repository: "godotengine/godot"
          token:
            ${{ secrets.GITHUB_TOKEN }}
            # Make sure the actual branch is checked out when running on pull requests
          ref: ${{ github.head_ref }}
          # This is important to fetch the changes to the previous commit
          fetch-depth: 0
          # clean: "false"

      # - name: Install MSVC
      #   if: runner.os == 'Windows'
      #   uses: ilammy/msvc-dev-cmd@v1

      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x" # Version range or exact version of a Python version to use, using SemVer's version range syntax
          architecture: "x64" # optional x64 or x86. Defaults to x64 if not specified
          
      - uses: jannekem/run-python-script-action@v1
          id: script
          with:
            fail-on-error: false
            script: |
              import version
              print(f'{version.major}.{version.minor}.{version.patch}-{version.status}')

      # - name: Install Scons
      #   run: python -m pip install scons

      # - name: Install Choco
      #   uses: crazy-max/ghaction-chocolatey@v1
      #   with:
      #     args: -h
      # - run: choco install yasm make

      # - run: ls

      # - name: Build GODOT
      #   run: scons -j6 platform=windows target=release_debug

      - name: create fake build
        run: |
          dir
          mkdir bin
          cd bin
          fsutil file createnew godot.windows.opt.tools.64.exe 1000
          cd ..

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: bin/godot.windows.opt.tools.64.exe
          asset_name: godot_win_x64.exe
          tag: $SCRIPT_STDOUT
          overwrite: true
          body: "This is my test release"
        env:
          SCRIPT_STDOUT: ${{ steps.script.outputs.stdout }}
          SCRIPT_STDERR: ${{ steps.script.outputs.stderr }} 
